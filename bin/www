#!/usr/bin/env node

/**
 * Module dependencies.
 */
var mysql = require('mysql');

var app = require('../app');
var post = require('../api/post');
var agenda = require('../api/agenda');
var perfil = require('../api/perfil');
var asignaturas = require('../api/asignaturas');
var mensajes = require('../api/mensajes');
var foro = require('../api/foro');

var debug = require('debug')('SMDE2:server');
var http = require('http');

// Conecta a la DB MySQL
function databaseInstance(){
  var connection = mysql.createConnection({
    multipleStatements: true,
    host: 'localhost',
    password: 'n0m3l0',
    user: 'root',
    database: 'smdedbv1',
    port: 3306
  });
  return connection;
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function(){
  var base = new databaseInstance();
  base.connect(function(error){
    if(error){
      throw error;
    }else{
      console.log('Conexion correcta.');
    }
  });
  post.constructor(databaseInstance);
  perfil.constructor(databaseInstance);
  agenda.constructor(databaseInstance);
  asignaturas.constructor(databaseInstance);
  mensajes.constructor(databaseInstance);
  foro.constructor(databaseInstance);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
